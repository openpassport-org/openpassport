import type { NextPage } from 'next';
import { useEffect, useState } from 'react';
import {
    ButtonGenerateProof,
    ButtonExportProof,
    ButtonSearchPassport,
    ButtonMint,
} from '../components/Buttons';
import {
    InputHash,
    InputPassport,
    InputPublicKey,
    InputSignature,
} from '../components/Inputs';
import { NavMenu, Title, Description, Footer } from '../components/Navigation';
import { PropsAppPage } from '../types';
import { Web3Button } from '@web3modal/react';
import { Contract, Interface, toBigInt, parseUnits } from 'ethers';
import ProofOfBaguette from '../ProofOfBaguette.json';
import { call } from 'viem/dist/types/actions/public/call';
import bigInt from 'big-integer';

/**
 * @dev for exporting json proof and public signals data
 */
(BigInt.prototype as any).toJSON = function () {
    return this.toString();
};

function p256(n: any) {
    let nstr = n.toString(16);
    while (nstr.length < 64) nstr = '0' + nstr;
    nstr = `"0x${nstr}"`;
    return nstr;
}

function unstringifyBigInts(o: any): any {
    if (typeof o == 'string' && /^[0-9]+$/.test(o)) {
        return bigInt(o);
    } else if (Array.isArray(o)) {
        return o.map(unstringifyBigInts);
    } else if (typeof o == 'object') {
        const res: any = {};
        for (let k in o) {
            res[k] = unstringifyBigInts(o[k]);
        }
        return res;
    } else {
        return o;
    }
}

const Home: NextPage<PropsAppPage> = ({
    proof,
    setproof,
    vkeyVerifier,
    vkeyProof,
}) => {
    const [hash, sethash] = useState<null | string>(null);
    const [passport, setPassport] = useState<null | string>(null);
    const [signature, setsignature] = useState<null | string>(null);
    const [publicKey, setpublicKey] = useState<null | string>(null);
    const [publicSignals, setpublicSignals] = useState<null | any>(null); //
    const [compiledCircuit, setcompiledCircuit] = useState(null);
    const [a, setA] = useState<any>(undefined);
    const [b, setB] = useState<any>(undefined);
    const [c, setC] = useState<any>(undefined);
    const [inputs, setInputs] = useState<any>(undefined);
    const [tx, setTx] = useState<string>('');

    const convertToCalldata = async () => {
        // const proof = unstringifyBigInts({
        //     pi_a: [
        //         '19287492320435483440704457394155277171350568551804065185119841485812565810082',
        //         '3684562538256035356686194265585363354008612543358421635483534437426025891117',
        //         '1',
        //     ],
        //     pi_b: [
        //         [
        //             '11055670746460836696159731062483614239524610460745056281780386167160325326636',
        //             '2820701812791380870233869601400033565999744176272665088190485906290409159639',
        //         ],
        //         [
        //             '4095435693621421431757230136783849695386191327789252894791688842209983968784',
        //             '1111622903601858550456839182623484829182143016402851311503851728483637212792',
        //         ],
        //         ['1', '0'],
        //     ],
        //     pi_c: [
        //         '9904673993391729395981527856105603527864541520723223317201726900543246149400',
        //         '18822540632936788087711438859341594977533047180857712179269886168960479278995',
        //         '1',
        //     ],
        //     protocol: 'groth',
        // });
        // const publicSignals = unstringifyBigInts([
        //     '65537',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '0',
        //     '1004979219314799894',
        //     '6361443755252600907',
        //     '6439012883494616023',
        //     '9400879716815088139',
        //     '17551897985575934811',
        //     '11779273958797828281',
        //     '2536315921873401485',
        //     '3748173260178203981',
        //     '12475215309213288577',
        //     '6281117468118442715',
        //     '1336292932993922350',
        //     '14238156234566069988',
        //     '11985045093510507012',
        //     '3585865343992378960',
        //     '16170829868787473084',
        //     '17039645001628184779',
        //     '486540501180074772',
        //     '5061439412388381188',
        //     '12478821212163933993',
        //     '7430448406248319432',
        //     '746345521572597865',
        //     '5002454658692185142',
        //     '3715069341922830389',
        //     '11010599232161942094',
        //     '1577500614971981868',
        //     '13656226284809645063',
        //     '3918261659477120323',
        //     '5578832687955645075',
        //     '3416933977282345392',
        //     '15829829506526117610',
        //     '17465616637242519010',
        //     '6519177967447716150',
        //     '9539992759301679521',
        //     '1652651398804391575',
        //     '7756096264856639170',
        //     '15028348881266521487',
        //     '13451582891670014060',
        //     '11697656644529425980',
        //     '14590137142310897374',
        //     '1172377360308996086',
        //     '6389592621616098288',
        //     '6767780215543232436',
        //     '11347756978427069433',
        //     '2593119277386338350',
        //     '18385617576997885505',
        //     '14960211320702750252',
        //     '8706817324429498800',
        //     '15168543370367053559',
        //     '8708916123725550363',
        //     '18006178692029805686',
        //     '6398208271038376723',
        //     '15000821494077560096',
        //     '17674982305626887153',
        //     '2867958270953137726',
        //     '9287774520059158342',
        //     '9813100051910281130',
        //     '13494313215150203208',
        //     '7792741716144106392',
        //     '6553490305289731807',
        //     '32268224696386820',
        //     '15737886769048580611',
        //     '669518601007982974',
        //     '11424760966478363403',
        //     '16073833083611347461',
        //     '897585614395172552642670145532424661022951192962',
        // ]);
        // let inputs = '';
        // for (let i = 0; i < publicSignals.length; i++) {
        //     if (inputs != '') inputs = inputs + ',';
        //     inputs = inputs + p256(publicSignals[i]);
        // }

        // let S;

        // S =
        //     `{"a": [${p256(proof.pi_a[0])}, ${p256(proof.pi_a[1])}],` +
        //     `"b": [[${p256(proof.pi_b[0][1])}, ${p256(
        //         proof.pi_b[0][0]
        //     )}],[${p256(proof.pi_b[1][1])}, ${p256(proof.pi_b[1][0])}]],` +
        //     `"c": [${p256(proof.pi_c[0])}, ${p256(proof.pi_c[1])}],` +
        //     `"inputs": [${inputs}]}`;

        const exampleCorrectProof = {
            a: [
                '0x0c7141194fa7a5a26dd3834bd9490908286e3c772dcaecca314b74a58a222642',
                '0x0494611f581503a05ebd4e8fe17e9c7ec05a0c022081bbe6115a6bf8afcd8c19',
            ],
            b: [
                [
                    '0x01b8ab498c66a313e3320b0a65d94ab35e4be73616a56b33685415e5b312cb57',
                    '0x071417e130b6f8c45cee4644adbb90ae62c542ec26fa83377b86fadfe737cddc',
                ],
                [
                    '0x2d991227175693d047f1e976af6986a58aa313d75677a0e70939b3ddb1912df2',
                    '0x1326e7a60a10320b5477d3bbc824121d1cbf2381293a09bf82ff5418897d7706',
                ],
            ],
            c: [
                '0x19912bf5bfee2e72d3cc357fa6b94741ba70bb9e25ca72922cc23cef79adab68',
                '0x1dc4caae04391e8d72f288970e195f1d317476a1890977083d8db832c5a6552a',
            ],
            input: [
                '0x0000000000000000000000000000000000000000000000000000000000010001',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000df267467de87516',
                '0x000000000000000000000000000000000000000000000000584863641a75504b',
                '0x000000000000000000000000000000000000000000000000595bf81a28dc3bd7',
                '0x0000000000000000000000000000000000000000000000008276a24b60f02a0b',
                '0x000000000000000000000000000000000000000000000000f394de395425db5b',
                '0x000000000000000000000000000000000000000000000000a37863419a2760b9',
                '0x0000000000000000000000000000000000000000000000002332cde4996e768d',
                '0x00000000000000000000000000000000000000000000000034042fb8b18a254d',
                '0x000000000000000000000000000000000000000000000000ad20de3a2a2c4881',
                '0x000000000000000000000000000000000000000000000000572b030ef7b362db',
                '0x000000000000000000000000000000000000000000000000128b7757b2f7b52e',
                '0x000000000000000000000000000000000000000000000000c59817a889d2eee4',
                '0x000000000000000000000000000000000000000000000000a6536f0357bb6a04',
                '0x00000000000000000000000000000000000000000000000031c38d88190cb650',
                '0x000000000000000000000000000000000000000000000000e06a5416c45a9abc',
                '0x000000000000000000000000000000000000000000000000ec78fad95ccef0cb',
                '0x00000000000000000000000000000000000000000000000006c08a020dadcb14',
                '0x000000000000000000000000000000000000000000000000463dd85433924204',
                '0x000000000000000000000000000000000000000000000000ad2dadc6dea40729',
                '0x000000000000000000000000000000000000000000000000671e4175104c69c8',
                '0x0000000000000000000000000000000000000000000000000a5b8d4c2d09d069',
                '0x000000000000000000000000000000000000000000000000456c4a0208587c36',
                '0x000000000000000000000000000000000000000000000000338e93e219412835',
                '0x00000000000000000000000000000000000000000000000098cd81aa3d338a4e',
                '0x00000000000000000000000000000000000000000000000015e468738c5d802c',
                '0x000000000000000000000000000000000000000000000000bd84a973c66e6c07',
                '0x000000000000000000000000000000000000000000000000366076382e2a9543',
                '0x0000000000000000000000000000000000000000000000004d6bfec592ef1293',
                '0x0000000000000000000000000000000000000000000000002f6b635940e079b0',
                '0x000000000000000000000000000000000000000000000000dbaeda10ef7c7eea',
                '0x000000000000000000000000000000000000000000000000f26255cb75fe2de2',
                '0x0000000000000000000000000000000000000000000000005a78c5d241463136',
                '0x0000000000000000000000000000000000000000000000008464dcde99f9a9a1',
                '0x00000000000000000000000000000000000000000000000016ef65b0eb49c697',
                '0x0000000000000000000000000000000000000000000000006ba33075968396c2',
                '0x000000000000000000000000000000000000000000000000d08f6baf1487b58f',
                '0x000000000000000000000000000000000000000000000000baad9f5ed4b6886c',
                '0x000000000000000000000000000000000000000000000000a2566cbdc9aa0e3c',
                '0x000000000000000000000000000000000000000000000000ca7a946dd7ac86de',
                '0x00000000000000000000000000000000000000000000000010451eff67ed87f6',
                '0x00000000000000000000000000000000000000000000000058ac64a2c6e26bf0',
                '0x0000000000000000000000000000000000000000000000005debfc3fb15ef7b4',
                '0x0000000000000000000000000000000000000000000000009d7b54d9509b03f9',
                '0x00000000000000000000000000000000000000000000000023fc9c3e6cd4902e',
                '0x000000000000000000000000000000000000000000000000ff26d5c66d231641',
                '0x000000000000000000000000000000000000000000000000cf9d58eeff43ce2c',
                '0x00000000000000000000000000000000000000000000000078d4d439d2d659b0',
                '0x000000000000000000000000000000000000000000000000d2817dd436d5aef7',
                '0x00000000000000000000000000000000000000000000000078dc49129d55531b',
                '0x000000000000000000000000000000000000000000000000f9e2cc1e9ca4f476',
                '0x00000000000000000000000000000000000000000000000058cb0085fa356b13',
                '0x000000000000000000000000000000000000000000000000d02d9fabcd899520',
                '0x000000000000000000000000000000000000000000000000f54a26c2ca3493f1',
                '0x00000000000000000000000000000000000000000000000027cd08da32ce263e',
                '0x00000000000000000000000000000000000000000000000080e4cdb79e0cdf46',
                '0x000000000000000000000000000000000000000000000000882f2281537ac7aa',
                '0x000000000000000000000000000000000000000000000000bb456e5f8ce32148',
                '0x0000000000000000000000000000000000000000000000006c25614d99232b98',
                '0x0000000000000000000000000000000000000000000000005af2acb5f5c2bedf',
                '0x0000000000000000000000000000000000000000000000000072a3c7868f8504',
                '0x000000000000000000000000000000000000000000000000da6834a23075f203',
                '0x000000000000000000000000000000000000000000000000094a9b9ecf98e97e',
                '0x0000000000000000000000000000000000000000000000009e8ce7916ab0fb0b',
                '0x000000000000000000000000000000000000000000000000df11ba06d7937a05',
                '0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8',
            ],
        };

        // const calldata = JSON.parse(S);
        const calldata = exampleCorrectProof;
        console.log(calldata);

        let bigstr = `0x3723d14a${calldata.a[0].substring(
            2
        )}${calldata.a[1].substring(2)}${calldata.b[0][0].substring(
            2
        )}${calldata.b[0][1].substring(2)}${calldata.b[1][0].substring(
            2
        )}${calldata.b[1][1].substring(2)}${calldata.c[0].substring(
            2
        )}${calldata.c[1].substring(2)}${calldata.input
            .map((x: any) => x.substring(2))
            .join('')}`;

        console.log('Transaction data:');
        console.log(bigstr);
        setTx(bigstr);
    };

    useEffect(() => {
        if (hash) convertToCalldata();
    }, [hash]);

    // TODO : set the right address. For now, mine hardcoded
    const [address, setAddress] = useState(
        '0x9D392187c08fc28A86e1354aD63C70897165b982'
    );

    return (
        <div>
            <div className="mt-5 ml-5">
                <Web3Button />
            </div>
            <Title></Title>
            <Description></Description>
            <NavMenu></NavMenu>
            <div className="flex flex-col space-y-10 items-center">
                <InputPassport setPassport={setPassport}></InputPassport>
                {passport && (
                    <div className="w-1/3 m-auto">
                        <ButtonSearchPassport
                            passport={passport}
                            setHash={sethash}
                            setSignature={setsignature}
                            setPublicKey={setpublicKey}
                        />
                    </div>
                )}
                {hash && signature && publicKey ? (
                    <div className="text-green-500 font-roboto-light-300 text-5xl">
                        🎊 You exist! 🎊
                    </div>
                ) : null}

                {/*<InputHash sethash={sethash} hash={hash}></InputHash>
                <InputSignature
                    setsignature={setsignature}
                    signature={signature}
                ></InputSignature>
                <InputPublicKey
                    setpublicKey={setpublicKey}
                    publicKey={publicKey}
                ></InputPublicKey>*/}
            </div>
            <div className="mt-4 flex flex-col w-11/12">
                <ButtonGenerateProof
                    vkeyVerifier={vkeyVerifier}
                    vkeyProof={vkeyProof}
                    address={address}
                    setcompiledCircuit={setcompiledCircuit}
                    setpublicSignals={setpublicSignals}
                    hash={hash}
                    signature={signature}
                    publicKey={publicKey}
                    setproof={setproof}
                ></ButtonGenerateProof>
                {tx ? (
                    <ButtonMint
                        publicSignals={publicSignals}
                        proof={proof}
                        a={a}
                        b={b}
                        c={c}
                        inputs={inputs}
                        tx={tx}
                    ></ButtonMint>
                ) : null}
            </div>
            <Footer></Footer>
        </div>
    );
};
export default Home;
