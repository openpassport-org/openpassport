import { time, loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { anyValue } from "@nomicfoundation/hardhat-chai-matchers/withArgs";
import { expect } from "chai";
import { ethers } from "hardhat";

const exampleCorrectProof = {
  a: [
    "0x0c7141194fa7a5a26dd3834bd9490908286e3c772dcaecca314b74a58a222642",
    "0x0494611f581503a05ebd4e8fe17e9c7ec05a0c022081bbe6115a6bf8afcd8c19",
  ],
  b: [
    [
      "0x01b8ab498c66a313e3320b0a65d94ab35e4be73616a56b33685415e5b312cb57",
      "0x071417e130b6f8c45cee4644adbb90ae62c542ec26fa83377b86fadfe737cddc",
    ],
    [
      "0x2d991227175693d047f1e976af6986a58aa313d75677a0e70939b3ddb1912df2",
      "0x1326e7a60a10320b5477d3bbc824121d1cbf2381293a09bf82ff5418897d7706",
    ],
  ],
  c: [
    "0x19912bf5bfee2e72d3cc357fa6b94741ba70bb9e25ca72922cc23cef79adab68",
    "0x1dc4caae04391e8d72f288970e195f1d317476a1890977083d8db832c5a6552a",
  ],
  input: [
    "0x0000000000000000000000000000000000000000000000000000000000010001",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000df267467de87516",
    "0x000000000000000000000000000000000000000000000000584863641a75504b",
    "0x000000000000000000000000000000000000000000000000595bf81a28dc3bd7",
    "0x0000000000000000000000000000000000000000000000008276a24b60f02a0b",
    "0x000000000000000000000000000000000000000000000000f394de395425db5b",
    "0x000000000000000000000000000000000000000000000000a37863419a2760b9",
    "0x0000000000000000000000000000000000000000000000002332cde4996e768d",
    "0x00000000000000000000000000000000000000000000000034042fb8b18a254d",
    "0x000000000000000000000000000000000000000000000000ad20de3a2a2c4881",
    "0x000000000000000000000000000000000000000000000000572b030ef7b362db",
    "0x000000000000000000000000000000000000000000000000128b7757b2f7b52e",
    "0x000000000000000000000000000000000000000000000000c59817a889d2eee4",
    "0x000000000000000000000000000000000000000000000000a6536f0357bb6a04",
    "0x00000000000000000000000000000000000000000000000031c38d88190cb650",
    "0x000000000000000000000000000000000000000000000000e06a5416c45a9abc",
    "0x000000000000000000000000000000000000000000000000ec78fad95ccef0cb",
    "0x00000000000000000000000000000000000000000000000006c08a020dadcb14",
    "0x000000000000000000000000000000000000000000000000463dd85433924204",
    "0x000000000000000000000000000000000000000000000000ad2dadc6dea40729",
    "0x000000000000000000000000000000000000000000000000671e4175104c69c8",
    "0x0000000000000000000000000000000000000000000000000a5b8d4c2d09d069",
    "0x000000000000000000000000000000000000000000000000456c4a0208587c36",
    "0x000000000000000000000000000000000000000000000000338e93e219412835",
    "0x00000000000000000000000000000000000000000000000098cd81aa3d338a4e",
    "0x00000000000000000000000000000000000000000000000015e468738c5d802c",
    "0x000000000000000000000000000000000000000000000000bd84a973c66e6c07",
    "0x000000000000000000000000000000000000000000000000366076382e2a9543",
    "0x0000000000000000000000000000000000000000000000004d6bfec592ef1293",
    "0x0000000000000000000000000000000000000000000000002f6b635940e079b0",
    "0x000000000000000000000000000000000000000000000000dbaeda10ef7c7eea",
    "0x000000000000000000000000000000000000000000000000f26255cb75fe2de2",
    "0x0000000000000000000000000000000000000000000000005a78c5d241463136",
    "0x0000000000000000000000000000000000000000000000008464dcde99f9a9a1",
    "0x00000000000000000000000000000000000000000000000016ef65b0eb49c697",
    "0x0000000000000000000000000000000000000000000000006ba33075968396c2",
    "0x000000000000000000000000000000000000000000000000d08f6baf1487b58f",
    "0x000000000000000000000000000000000000000000000000baad9f5ed4b6886c",
    "0x000000000000000000000000000000000000000000000000a2566cbdc9aa0e3c",
    "0x000000000000000000000000000000000000000000000000ca7a946dd7ac86de",
    "0x00000000000000000000000000000000000000000000000010451eff67ed87f6",
    "0x00000000000000000000000000000000000000000000000058ac64a2c6e26bf0",
    "0x0000000000000000000000000000000000000000000000005debfc3fb15ef7b4",
    "0x0000000000000000000000000000000000000000000000009d7b54d9509b03f9",
    "0x00000000000000000000000000000000000000000000000023fc9c3e6cd4902e",
    "0x000000000000000000000000000000000000000000000000ff26d5c66d231641",
    "0x000000000000000000000000000000000000000000000000cf9d58eeff43ce2c",
    "0x00000000000000000000000000000000000000000000000078d4d439d2d659b0",
    "0x000000000000000000000000000000000000000000000000d2817dd436d5aef7",
    "0x00000000000000000000000000000000000000000000000078dc49129d55531b",
    "0x000000000000000000000000000000000000000000000000f9e2cc1e9ca4f476",
    "0x00000000000000000000000000000000000000000000000058cb0085fa356b13",
    "0x000000000000000000000000000000000000000000000000d02d9fabcd899520",
    "0x000000000000000000000000000000000000000000000000f54a26c2ca3493f1",
    "0x00000000000000000000000000000000000000000000000027cd08da32ce263e",
    "0x00000000000000000000000000000000000000000000000080e4cdb79e0cdf46",
    "0x000000000000000000000000000000000000000000000000882f2281537ac7aa",
    "0x000000000000000000000000000000000000000000000000bb456e5f8ce32148",
    "0x0000000000000000000000000000000000000000000000006c25614d99232b98",
    "0x0000000000000000000000000000000000000000000000005af2acb5f5c2bedf",
    "0x0000000000000000000000000000000000000000000000000072a3c7868f8504",
    "0x000000000000000000000000000000000000000000000000da6834a23075f203",
    "0x000000000000000000000000000000000000000000000000094a9b9ecf98e97e",
    "0x0000000000000000000000000000000000000000000000009e8ce7916ab0fb0b",
    "0x000000000000000000000000000000000000000000000000df11ba06d7937a05",
    "0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8",
  ],
};

describe("ProofOfBaguette", function () {
  // We define a fixture to reuse the same setup in every test.
  // We use loadFixture to run this setup once, snapshot that state,
  // and reset Hardhat Network to that snapshot in every test.
  async function deployFixture() {
    // Contracts are deployed using the first signer/account by default
    const [owner, otherAccount] = await ethers.getSigners();

    const Verifier = await ethers.getContractFactory("Verifier");
    const verifier = await Verifier.deploy();

    console.log("otherAccount", otherAccount.address);
    console.log("owner", owner.address);
    await verifier.deployed();

    console.log(`RsaSha256Verifier deployed to ${verifier.address}`);

    const ProofOfBaguette = await ethers.getContractFactory("ProofOfBaguette");
    const proofOfBaguette = await ProofOfBaguette.deploy(verifier.address);

    await proofOfBaguette.deployed();

    console.log(`ProofOfBaguette deployed to ${proofOfBaguette.address}`);
    return { verifier, proofOfBaguette, owner, otherAccount };
  }

  describe("Deployment", function () {
    it("Verifier verifies correct example signature", async () => {
      const { verifier } = await loadFixture(deployFixture);

      expect(
        await verifier.verifyProof(
          exampleCorrectProof.a as any,
          exampleCorrectProof.b as any,
          exampleCorrectProof.c as any,
          exampleCorrectProof.input
        )
      ).to.be.true;
    });

    it("Should allow a user to mint a SBT", async function () {
      const { proofOfBaguette, otherAccount } = await loadFixture(
        deployFixture
      );

      await proofOfBaguette
        .connect(otherAccount)
        .mint(
          exampleCorrectProof.a as any,
          exampleCorrectProof.b as any,
          exampleCorrectProof.c as any,
          exampleCorrectProof.input
        );

      expect(await proofOfBaguette.balanceOf(otherAccount.address)).to.equal(1);
    });

    it("Shouldn't allow an invalid proof", async function () {
      const { proofOfBaguette, otherAccount } = await loadFixture(
        deployFixture
      );

      let invalidA = exampleCorrectProof.a;
      invalidA[1] =
        "0x1cdbaf59a0439d55f19162ee0be5a501f5b55c669a6e1f8d27b75d95ff31ff7b";

      expect(
        proofOfBaguette
          .connect(otherAccount)
          .mint(
            invalidA as any,
            exampleCorrectProof.b as any,
            exampleCorrectProof.c as any,
            exampleCorrectProof.input
          )
      ).to.be.revertedWith("Invalid proof");
    });

    // it("Should set the right owner", async function () {
    //   const { lock, owner } = await loadFixture(deployOneYearLockFixture);

    //   expect(await lock.owner()).to.equal(owner.address);
    // });

    // it("Should receive and store the funds to lock", async function () {
    //   const { lock, lockedAmount } = await loadFixture(
    //     deployOneYearLockFixture
    //   );

    //   expect(await ethers.provider.getBalance(lock.address)).to.equal(
    //     lockedAmount
    //   );
    // });

    // it("Should fail if the unlockTime is not in the future", async function () {
    //   // We don't use the fixture here because we want a different deployment
    //   const latestTime = await time.latest();
    //   const Lock = await ethers.getContractFactory("Lock");
    //   await expect(Lock.deploy(latestTime, { value: 1 })).to.be.revertedWith(
    //     "Unlock time should be in the future"
    //   );
    // });
  });
});
