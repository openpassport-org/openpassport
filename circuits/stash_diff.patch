diff --git a/app/App.tsx b/app/App.tsx
index 2ae1059..c2ba527 100644
--- a/app/App.tsx
+++ b/app/App.tsx
@@ -41,6 +41,7 @@ import { extractMRZInfo, Steps } from './src/utils/utils';
 import forge from 'node-forge';
 import { Buffer } from 'buffer';
 import { YStack } from 'tamagui';
+import { getCurrentDateYYMMDD } from '../common/src/utils/majority';
 global.Buffer = Buffer;
 
 console.log('DEFAULT_PNUMBER', DEFAULT_PNUMBER);
@@ -52,7 +53,8 @@ const attributeToPosition = {
   nationality: [54, 57],
   date_of_birth: [57, 63],
   gender: [64, 65],
-  expiry_date: [65, 71],
+  expiry_date: [65, 69],
+  majority: [88, 88],
 }
 
 function App(): JSX.Element {
@@ -308,7 +310,7 @@ function App(): JSX.Element {
         : passportData.dataGroupHashes
 
 
-    const reveal_bitmap = Array.from({ length: 88 }, (_) => '0');
+    const reveal_bitmap = Array.from({ length: 89 }, (_) => '0');
 
     for (const attribute in disclosure) {
       if (disclosure[attribute as keyof typeof disclosure]) {
@@ -340,7 +342,9 @@ function App(): JSX.Element {
         BigInt(64),
         BigInt(32)
       ),
-      address,
+      address: address,
+      current_date: Array.from(getCurrentDateYYMMDD()).map(datePart => BigInt(datePart)),
+      majority: BigInt(18),
     }
 
     console.log('inputs', inputs)
@@ -394,7 +398,10 @@ function App(): JSX.Element {
       console.log('running mopro prove action')
       const response = await NativeModules.Prover.runProveAction({
         ...inputs,
-        address: [BigInt(address).toString()]
+        address: [BigInt(address).toString()],
+        current_date: getCurrentDateYYMMDD().map(datePart => BigInt(datePart).toString()),
+        majority: [BigInt(18).toString()],
+
       })
       console.log('proof response:', response)
       const parsedResponse = JSON.parse(response)
diff --git a/app/android/react-native-passport-reader/android/src/main/java/io/tradle/nfc/RNPassportReaderModule.kt b/app/android/react-native-passport-reader/android/src/main/java/io/tradle/nfc/RNPassportReaderModule.kt
index 79a706e..33ff490 100644
--- a/app/android/react-native-passport-reader/android/src/main/java/io/tradle/nfc/RNPassportReaderModule.kt
+++ b/app/android/react-native-passport-reader/android/src/main/java/io/tradle/nfc/RNPassportReaderModule.kt
@@ -622,8 +622,10 @@ class RNPassportReaderModule(private val reactContext: ReactApplicationContext)
         val signature = inputs.getArray("signature")?.toArrayList()?.map { it as String } ?: listOf()
         val pubkey = inputs.getArray("pubkey")?.toArrayList()?.map { it as String } ?: listOf()
         val address = inputs.getString("address") ?: ""
+        val current_date = inputs.getArray("current_date")?.toArrayList()?.map { it as String } ?: listOf()
+        val majority = inputs.getString("majority") ?: ""
         
-        val resultFromProof = provePassport(mrz, reveal_bitmap, data_hashes, e_content_bytes, signature, pubkey, address)
+        val resultFromProof = provePassport(mrz, reveal_bitmap, data_hashes, e_content_bytes, signature, pubkey, address, current_date, majority)
 
         Log.d(TAG, "resultFromProof: " + resultFromProof.toString())
 
diff --git a/app/src/components/AppCard.tsx b/app/src/components/AppCard.tsx
index 1b6799b..432b280 100644
--- a/app/src/components/AppCard.tsx
+++ b/app/src/components/AppCard.tsx
@@ -2,7 +2,7 @@ import React from 'react';
 import { Text, YStack, XStack, Card, H3, Image } from 'tamagui';
 import { ChevronRight } from '@tamagui/lucide-icons';
 import { Platform } from 'react-native';
-
+import Toast, { BaseToast, ErrorToast, SuccessToast, ToastProps } from 'react-native-toast-message';
 
 interface AppCardProps {
     title: string;
@@ -12,6 +12,7 @@ interface AppCardProps {
     id: string | number;
     onTouchStart?: () => void;
     selected?: boolean;
+    selectable?: boolean;
 }
 
 const AppCard: React.FC<AppCardProps> = ({
@@ -21,8 +22,19 @@ const AppCard: React.FC<AppCardProps> = ({
     background,
     id,
     onTouchStart,
-    selected
+    selected,
+    selectable
 }) => {
+
+    //add a funciton that will toast a message if that the app is currently not available
+    const showAppNotAvailabletoast = () => {
+        Toast.show({
+            type: 'error',
+            text1: 'App not available',
+            text2: 'This app is currently not available'
+        });
+    }
+
     return (
         <XStack
             overflow="hidden"
@@ -31,11 +43,12 @@ const AppCard: React.FC<AppCardProps> = ({
             borderColor={(selected) ? "#3185FC" : ((Platform.OS === 'ios') ? "white" : "transparent")}
             borderWidth={(selected) ? 3 : 3}
             shadowColor={selected ? "#3185FC" : "black"}
+            bg={selectable ? "transparent" : "rgba(128, 128, 128, 0.5)"}
         >
             <Card
                 key={id}
                 elevation={0}
-                onTouchStart={onTouchStart}
+                onTouchStart={selectable ? onTouchStart : showAppNotAvailabletoast}
             >
                 <XStack w="100%"
                 >
diff --git a/app/src/screens/AppScreen.tsx b/app/src/screens/AppScreen.tsx
index 50578ca..e068d26 100644
--- a/app/src/screens/AppScreen.tsx
+++ b/app/src/screens/AppScreen.tsx
@@ -31,6 +31,7 @@ const AppScreen: React.FC<AppScreenProps> = ({ selectedApp, setSelectedApp, step
       description: 'Prove your identity at in person events',
       background: ZUPASS,
       colorOfTheText: 'white',
+      seletable: false,
     },
     {
       app: gitcoin,
@@ -38,12 +39,14 @@ const AppScreen: React.FC<AppScreenProps> = ({ selectedApp, setSelectedApp, step
       description: 'And donate to your favorite projects',
       background: GITCOIN,
       colorOfTheText: 'white',
+      selectable: false,
     },
     {
       app: soulbound,
       title: 'Mint SBT',
       description: 'And prove you\'re a human',
       colorOfTheText: 'black',
+      selectable: true,
     },
   ];
 
diff --git a/app/src/utils/AppClass.ts b/app/src/utils/AppClass.ts
index 20add54..cd61e18 100644
--- a/app/src/utils/AppClass.ts
+++ b/app/src/utils/AppClass.ts
@@ -19,5 +19,5 @@ export class App {
 }
 
 export const gitcoin = new App("gitcoin", "Gitcoin", {}, "Add to Gitcoin passport", "Gitcoin passport doesn't require disclosure of any data.");
-export const soulbound = new App("soulbound", "Soulbound token", { nationality: true, expiry_date: false }, "Mint Soulbound token", "Choose the information you want to disclose and mint your SBT.");
+export const soulbound = new App("soulbound", "Soulbound token", { majority: false, nationality: true, expiry_date: false }, "Mint Soulbound token", "Choose the information you want to disclose and mint your SBT.");
 export const zuzalu = new App("zuzalu", "Zupass", { date_of_birth: false }, "Add to Zupass", "Zupass requires the following information:");
diff --git a/common/src/utils/majority.ts b/common/src/utils/majority.ts
index 9fab02b..b2259ae 100644
--- a/common/src/utils/majority.ts
+++ b/common/src/utils/majority.ts
@@ -89,3 +89,17 @@ export function yymmddToByteArray(yymmdd: string): number[] {
     const byteArray = Array.from(yymmdd).map(char => char.charCodeAt(0));
     return byteArray;
 }
+
+export function getCurrentDateYYMMDD(): number[] {
+    const date = new Date();
+    const year = date.getUTCFullYear();
+    const month = date.getUTCMonth() + 1;
+    const day = date.getUTCDate();
+
+    const YY = (`0${year % 100}`).slice(-2);
+    const MM = (`0${month}`).slice(-2);
+    const DD = (`0${day}`).slice(-2);
+
+    const yymmdd = `${YY}${MM}${DD}`;
+    return Array.from(yymmdd).map(char => parseInt(char));
+}
\ No newline at end of file
diff --git a/contracts/.gitignore b/contracts/.gitignore
index 71f6a16..fa260cd 100644
--- a/contracts/.gitignore
+++ b/contracts/.gitignore
@@ -9,3 +9,4 @@ typechain-types
 cache
 artifacts
 
+contracts/Verifier.sol
\ No newline at end of file
diff --git a/contracts/contracts/Verifier.sol b/contracts/contracts/Verifier.sol
index 09a7116..f43c631 100644
--- a/contracts/contracts/Verifier.sol
+++ b/contracts/contracts/Verifier.sol
@@ -37,62 +37,80 @@ contract Groth16Verifier {
     uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
     uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
     uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;
-    uint256 constant deltax1 = 13332829983292634874659240068294550011141456103652018916224391594481625590699;
-    uint256 constant deltax2 = 21775687996720864507552980920389387944496604814608793381435179673741251662482;
-    uint256 constant deltay1 = 15444510239488592734510692256596834816736560818857866493410444065736122722029;
-    uint256 constant deltay2 = 12213750345729207307537910743738626761327252153590563067440130819625419372191;
+    uint256 constant deltax1 = 1454017293520906596467114014745138201825046828192510066136864934960621561210;
+    uint256 constant deltax2 = 2047711064851366975045277844743161214670568836891777875529437478970075633407;
+    uint256 constant deltay1 = 17446675310647342150830222801173049913555166011711971027814894246919778833164;
+    uint256 constant deltay2 = 8404307031382907063934235105370530915988292404237181687484344917135487220707;
 
     
-    uint256 constant IC0x = 4897812530436581420070048815704719785256466787655503857610889333796081821201;
-    uint256 constant IC0y = 21324217308758963004039464033551222626995062428505595457846546072979649950535;
+    uint256 constant IC0x = 19701621754449409918354329823247291549146813914249816277825912051654418009685;
+    uint256 constant IC0y = 12109119966478636085857380435189001712369539166098913790151375340768601875158;
     
-    uint256 constant IC1x = 3402067829842345916430895428185245090645621522198317090797379965574771542636;
-    uint256 constant IC1y = 15689341079133962080137763365487039194375030636040098473539254350433970371666;
+    uint256 constant IC1x = 20365627413607075523425378477431134100772918582301516514617504482440364938310;
+    uint256 constant IC1y = 11281849010310435349264174839494510087296211513780836659575811373376419952618;
     
-    uint256 constant IC2x = 17395362500217368985868893090734905039167826866091632900857231867723495577602;
-    uint256 constant IC2y = 7930260148586132748363663695528567251481992615924576457603406418853534765181;
+    uint256 constant IC2x = 1706601081939918516368343994656419968952340032671734071873173770887633533130;
+    uint256 constant IC2y = 2443390199005696931355656570733069075410696724466585516120495861413764155411;
     
-    uint256 constant IC3x = 585494952178863414068208567603839798093905284375122061973360892129986520320;
-    uint256 constant IC3y = 9052106461455604192832593945466435172808609013430707922648579604917214395471;
+    uint256 constant IC3x = 17215303112664565300352702497648047334525089976318436668375606198327763922382;
+    uint256 constant IC3y = 8506320969985480815868429254346102340276386286926466469899857589854886150449;
     
-    uint256 constant IC4x = 7009544555987721721525965879762930953012066717281509356647068054408609863246;
-    uint256 constant IC4y = 9820829334259318510794834811753840115411696228971683399345859623869811549881;
+    uint256 constant IC4x = 13791447346440543045853149012645209878046365629963825379016391748550187475474;
+    uint256 constant IC4y = 3435032299755874594528964739952854950730514157065385289703633235644403879916;
     
-    uint256 constant IC5x = 14238418207024939545815829157744718461870627038741425938816007286311574134474;
-    uint256 constant IC5y = 281828200475697177916593309667507636329345262293367509851063337891478088781;
+    uint256 constant IC5x = 14783479012831212249729352349821833288305028575424310178571431244978455656150;
+    uint256 constant IC5y = 7037827826375310464808476033507938115897069892577704624189491214318456423813;
     
-    uint256 constant IC6x = 2588875801176981985506740691573068253787601389179711941209167172577223524972;
-    uint256 constant IC6y = 15518320710469760878810555468816349074382837865578096899468878146062509663814;
+    uint256 constant IC6x = 17328539300688469685879777089104934614284786148668724902698648636900523283938;
+    uint256 constant IC6y = 8034059457972084962867971057883285631546546455841284600353855633709119883070;
     
-    uint256 constant IC7x = 17316533695265131380437649603796400699657451230738779001098608159520582988369;
-    uint256 constant IC7y = 8192809588256960378913803069056080395056022087843425771582496472786713726350;
+    uint256 constant IC7x = 1671700929446747911389960188271442089488060129559079940712322249389306623712;
+    uint256 constant IC7y = 15843709435074008356979165234940736043122734490402162802516739272988949413296;
     
-    uint256 constant IC8x = 7407001681033909392094003743482787694603426004447721439357204522366208646546;
-    uint256 constant IC8y = 14678011064151490372018354732758508739891026527348606433971585164806457243690;
+    uint256 constant IC8x = 2952345391868077486876744121823960141306362712109507978665561026209568091720;
+    uint256 constant IC8y = 15792639407947067548304365680953444142322550312316136179068402107577715957501;
     
-    uint256 constant IC9x = 14324550585252189304511012915310919737099760521255841560510202883547241215550;
-    uint256 constant IC9y = 17843516173433864891394764190574725294294272661192260445890002683170043518436;
+    uint256 constant IC9x = 1949146581312210453020360966621711948834402199471714178813070576027125429150;
+    uint256 constant IC9y = 13529304573264802035496482973768117760542822065186316987522220403445631834391;
     
-    uint256 constant IC10x = 7539891259658208616633326740578026995822087197681333710337145994575633967330;
-    uint256 constant IC10y = 11252528180616460725708054390959401682257312545535188972038868508936671228701;
+    uint256 constant IC10x = 9720072702049576347798721714618290165330923659642096201298057000510069186630;
+    uint256 constant IC10y = 16288567125733449455385963546888547063064067326361950350090094839145483572290;
     
-    uint256 constant IC11x = 13300379642556942794398405666278194834327040509717856013516915921151482858342;
-    uint256 constant IC11y = 3765685546823952453740511654773017065896884149593650080085427606727523849353;
+    uint256 constant IC11x = 9030859955129039249683085876978866207330972559287538735392919617358948290704;
+    uint256 constant IC11y = 13572958151165671870300523963179096852722321290628908743014752624433408230760;
     
-    uint256 constant IC12x = 9268919849281685133024784239234560640021437913056581963083327429501365255031;
-    uint256 constant IC12y = 11222912618976361984001818562665888490194957370177999142904578411305511279126;
+    uint256 constant IC12x = 508312265967416772176661833669462511659944665488662500235947711308645588387;
+    uint256 constant IC12y = 19707178480683067071500734434536577594699112282611405539310576795490051510815;
     
-    uint256 constant IC13x = 2597478889552428352737130179687206531821645186216868965539289093449836402726;
-    uint256 constant IC13y = 757968852987628828382971340903318389342984851650872494795704692702408158904;
+    uint256 constant IC13x = 9097911075893490786031317165334101336708572026401534604461512948089580861613;
+    uint256 constant IC13y = 18637512177044937304035560895749101091033178306834887731900681902348729109747;
     
-    uint256 constant IC14x = 16147563600769233454259564579865458680953713847620754688678964339139397943562;
-    uint256 constant IC14y = 3229058257062194976564868360849873757615447419031013710509312378420932332089;
+    uint256 constant IC14x = 18682700467386057393578419076716991380655076550000122056766424573719969472407;
+    uint256 constant IC14y = 1122892408433003268669072974421051502011338218943082227006086481922307614205;
     
-    uint256 constant IC15x = 11276405747528923910383092138862864843497716277810279291090775583122182049041;
-    uint256 constant IC15y = 17478497004985764197329627914040721906294759410027200889688899456335265284727;
+    uint256 constant IC15x = 14178672780269176321816279435663504812551712812072230757964314515131454736518;
+    uint256 constant IC15y = 5648722243158442684116444352081322614623846607231158596566341728433262560690;
     
-    uint256 constant IC16x = 7537276704716430448981792598508402432998887447285614055846784939499149706536;
-    uint256 constant IC16y = 13397681836333574838145763582606233729786782316119672353292568940401561429759;
+    uint256 constant IC16x = 19179785274778651229517783804688940121655955126531501383948779033865898192663;
+    uint256 constant IC16y = 12017165380879398732365062095984044261789680743786725718868943714526065544649;
+    
+    uint256 constant IC17x = 19481270454793254990870292181162471296665176720917015387340028625104319642085;
+    uint256 constant IC17y = 8300460008284061982930332475977850571425192873340039335267033769415375566456;
+    
+    uint256 constant IC18x = 945345405336503566336188534565557306002233453825570647277484572213764298138;
+    uint256 constant IC18y = 8548108368409593573378912111054751533762524291322091103610225242366009522605;
+    
+    uint256 constant IC19x = 2337899130392994377853657831236055912737931911287481534356535528254773039791;
+    uint256 constant IC19y = 15724236189079675139166983357614139292468883672041753873783939366053253041804;
+    
+    uint256 constant IC20x = 13514050886865498014335641735035405288100271345901075944540558770977223317665;
+    uint256 constant IC20y = 16943986550893983413029145256444398968497737153901654656776638390862101092255;
+    
+    uint256 constant IC21x = 14339414522193480989672194721898283864975651480538568433601444503712429365742;
+    uint256 constant IC21y = 20695300626422916015197303684735095011293881622203372761000070258263798622353;
+    
+    uint256 constant IC22x = 20493622726901900085006152122747823944655575918006632677636069196608165379386;
+    uint256 constant IC22y = 13571183888091326756087683601140792107722146956004343729058067240549792122101;
     
  
     // Memory data
@@ -101,7 +119,7 @@ contract Groth16Verifier {
 
     uint16 constant pLastMem = 896;
 
-    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[16] calldata _pubSignals) public view returns (bool) {
+    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[22] calldata _pubSignals) public view returns (bool) {
         assembly {
             function checkField(v) {
                 if iszero(lt(v, q)) {
@@ -177,6 +195,18 @@ contract Groth16Verifier {
                 
                 g1_mulAccC(_pVk, IC16x, IC16y, calldataload(add(pubSignals, 480)))
                 
+                g1_mulAccC(_pVk, IC17x, IC17y, calldataload(add(pubSignals, 512)))
+                
+                g1_mulAccC(_pVk, IC18x, IC18y, calldataload(add(pubSignals, 544)))
+                
+                g1_mulAccC(_pVk, IC19x, IC19y, calldataload(add(pubSignals, 576)))
+                
+                g1_mulAccC(_pVk, IC20x, IC20y, calldataload(add(pubSignals, 608)))
+                
+                g1_mulAccC(_pVk, IC21x, IC21y, calldataload(add(pubSignals, 640)))
+                
+                g1_mulAccC(_pVk, IC22x, IC22y, calldataload(add(pubSignals, 672)))
+                
 
                 // -A
                 mstore(_pPairing, calldataload(pA))
@@ -264,6 +294,18 @@ contract Groth16Verifier {
             
             checkField(calldataload(add(_pubSignals, 512)))
             
+            checkField(calldataload(add(_pubSignals, 544)))
+            
+            checkField(calldataload(add(_pubSignals, 576)))
+            
+            checkField(calldataload(add(_pubSignals, 608)))
+            
+            checkField(calldataload(add(_pubSignals, 640)))
+            
+            checkField(calldataload(add(_pubSignals, 672)))
+            
+            checkField(calldataload(add(_pubSignals, 704)))
+            
 
             // Validate all evaluations
             let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)
